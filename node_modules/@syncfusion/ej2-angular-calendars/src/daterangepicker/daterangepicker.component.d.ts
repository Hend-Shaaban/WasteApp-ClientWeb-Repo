import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';
import { IComponentBase } from '@syncfusion/ej2-angular-base';
import { DateRangePicker } from '@syncfusion/ej2-calendars';
import * as ɵngcc0 from '@angular/core';
export declare const inputs: string[];
export declare const outputs: string[];
export declare const twoWays: string[];
/**
 * Represents the Essential JS 2 Angular DateRangePicker Component.
 * ```html
 * <ejs-daterangepicker [startDate]='date' [endDate]='date'></ejs-daterangepicker>
 * ```
 */
export declare class DateRangePickerComponent extends DateRangePicker implements IComponentBase {
    private ngEle;
    private srenderer;
    private viewContainerRef;
    private injector;
    formCompContext: any;
    formContext: any;
    tagObjects: any;
    childPresets: any;
    tags: string[];
    startDateChange: any;
    endDateChange: any;
    valueChange: any;
    /**
     * Specifies the initial view of the Calendar when it is opened.
     * With the help of this property, initial view can be changed to year or decade view.
     * @default Month
     */
    start: any;
    end: any;
    private skipFromEvent;
    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);
    registerOnChange(registerFunction: (_: any) => void): void;
    registerOnTouched(registerFunction: () => void): void;
    writeValue(value: any): void;
    setDisabledState(disabled: boolean): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    registerEvents: (eventList: string[]) => void;
    addTwoWay: (propList: string[]) => void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateRangePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DateRangePickerComponent, "ejs-daterangepicker", never, {
    "allowEdit": "allowEdit";
    "calendarMode": "calendarMode";
    "cssClass": "cssClass";
    "dayHeaderFormat": "dayHeaderFormat";
    "depth": "depth";
    "enablePersistence": "enablePersistence";
    "enableRtl": "enableRtl";
    "enabled": "enabled";
    "endDate": "endDate";
    "firstDayOfWeek": "firstDayOfWeek";
    "floatLabelType": "floatLabelType";
    "format": "format";
    "htmlAttributes": "htmlAttributes";
    "keyConfigs": "keyConfigs";
    "locale": "locale";
    "max": "max";
    "maxDays": "maxDays";
    "min": "min";
    "minDays": "minDays";
    "placeholder": "placeholder";
    "presets": "presets";
    "readonly": "readonly";
    "separator": "separator";
    "serverTimezoneOffset": "serverTimezoneOffset";
    "showClearButton": "showClearButton";
    "start": "start";
    "startDate": "startDate";
    "strictMode": "strictMode";
    "value": "value";
    "weekNumber": "weekNumber";
    "width": "width";
    "zIndex": "zIndex";
}, {
    "blur": "blur";
    "change": "change";
    "cleared": "cleared";
    "close": "close";
    "created": "created";
    "destroyed": "destroyed";
    "focus": "focus";
    "navigated": "navigated";
    "open": "open";
    "renderDayCell": "renderDayCell";
    "select": "select";
    "startDateChange": "startDateChange";
    "endDateChange": "endDateChange";
    "valueChange": "valueChange";
}, ["start", "end", "childPresets"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXJhbmdlcGlja2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJkYXRlcmFuZ2VwaWNrZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDb21wb25lbnRCYXNlIH0gZnJvbSAnQHN5bmNmdXNpb24vZWoyLWFuZ3VsYXItYmFzZSc7XG5pbXBvcnQgeyBEYXRlUmFuZ2VQaWNrZXIgfSBmcm9tICdAc3luY2Z1c2lvbi9lajItY2FsZW5kYXJzJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGlucHV0czogc3RyaW5nW107XG5leHBvcnQgZGVjbGFyZSBjb25zdCBvdXRwdXRzOiBzdHJpbmdbXTtcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IHR3b1dheXM6IHN0cmluZ1tdO1xuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBFc3NlbnRpYWwgSlMgMiBBbmd1bGFyIERhdGVSYW5nZVBpY2tlciBDb21wb25lbnQuXG4gKiBgYGBodG1sXG4gKiA8ZWpzLWRhdGVyYW5nZXBpY2tlciBbc3RhcnREYXRlXT0nZGF0ZScgW2VuZERhdGVdPSdkYXRlJz48L2Vqcy1kYXRlcmFuZ2VwaWNrZXI+XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0ZVJhbmdlUGlja2VyQ29tcG9uZW50IGV4dGVuZHMgRGF0ZVJhbmdlUGlja2VyIGltcGxlbWVudHMgSUNvbXBvbmVudEJhc2Uge1xuICAgIHByaXZhdGUgbmdFbGU7XG4gICAgcHJpdmF0ZSBzcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmO1xuICAgIHByaXZhdGUgaW5qZWN0b3I7XG4gICAgZm9ybUNvbXBDb250ZXh0OiBhbnk7XG4gICAgZm9ybUNvbnRleHQ6IGFueTtcbiAgICB0YWdPYmplY3RzOiBhbnk7XG4gICAgY2hpbGRQcmVzZXRzOiBhbnk7XG4gICAgdGFnczogc3RyaW5nW107XG4gICAgc3RhcnREYXRlQ2hhbmdlOiBhbnk7XG4gICAgZW5kRGF0ZUNoYW5nZTogYW55O1xuICAgIHZhbHVlQ2hhbmdlOiBhbnk7XG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBpbml0aWFsIHZpZXcgb2YgdGhlIENhbGVuZGFyIHdoZW4gaXQgaXMgb3BlbmVkLlxuICAgICAqIFdpdGggdGhlIGhlbHAgb2YgdGhpcyBwcm9wZXJ0eSwgaW5pdGlhbCB2aWV3IGNhbiBiZSBjaGFuZ2VkIHRvIHllYXIgb3IgZGVjYWRlIHZpZXcuXG4gICAgICogQGRlZmF1bHQgTW9udGhcbiAgICAgKi9cbiAgICBzdGFydDogYW55O1xuICAgIGVuZDogYW55O1xuICAgIHByaXZhdGUgc2tpcEZyb21FdmVudDtcbiAgICBjb25zdHJ1Y3RvcihuZ0VsZTogRWxlbWVudFJlZiwgc3JlbmRlcmVyOiBSZW5kZXJlcjIsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIGluamVjdG9yOiBJbmplY3Rvcik7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShyZWdpc3RlckZ1bmN0aW9uOiAoXzogYW55KSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChyZWdpc3RlckZ1bmN0aW9uOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoZGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICByZWdpc3RlckV2ZW50czogKGV2ZW50TGlzdDogc3RyaW5nW10pID0+IHZvaWQ7XG4gICAgYWRkVHdvV2F5OiAocHJvcExpc3Q6IHN0cmluZ1tdKSA9PiB2b2lkO1xufVxuIl19