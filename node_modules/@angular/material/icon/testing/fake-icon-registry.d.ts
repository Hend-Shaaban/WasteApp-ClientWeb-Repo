/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { OnDestroy } from '@angular/core';
import { MatIconRegistry } from '@angular/material/icon';
import { Observable } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
declare type PublicApi<T> = {
    [K in keyof T]: T[K] extends (...x: any[]) => T ? (...x: any[]) => PublicApi<T> : T[K];
};
/**
 * A null icon registry that must be imported to allow disabling of custom
 * icons.
 */
export declare class FakeMatIconRegistry implements PublicApi<MatIconRegistry>, OnDestroy {
    addSvgIcon(): this;
    addSvgIconLiteral(): this;
    addSvgIconInNamespace(): this;
    addSvgIconLiteralInNamespace(): this;
    addSvgIconSet(): this;
    addSvgIconSetLiteral(): this;
    addSvgIconSetInNamespace(): this;
    addSvgIconSetLiteralInNamespace(): this;
    registerFontClassAlias(): this;
    classNameForFontAlias(alias: string): string;
    getDefaultFontSetClass(): string;
    getSvgIconFromUrl(): Observable<SVGElement>;
    getNamedSvgIcon(): Observable<SVGElement>;
    setDefaultFontSetClass(): this;
    ngOnDestroy(): void;
    private _generateEmptySvg;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FakeMatIconRegistry>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FakeMatIconRegistry>;
}
/** Import this module in tests to install the null icon registry. */
export declare class MatIconTestingModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<MatIconTestingModule, never, never, never>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<MatIconTestingModule>;
}
export {};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFrZS1pY29uLXJlZ2lzdHJ5LmQudHMiLCJzb3VyY2VzIjpbImZha2UtaWNvbi1yZWdpc3RyeS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7OztBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXdCQTs7Ozs7QUFHQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgeyBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTWF0SWNvblJlZ2lzdHJ5IH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvaWNvbic7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuZGVjbGFyZSB0eXBlIFB1YmxpY0FwaTxUPiA9IHtcclxuICAgIFtLIGluIGtleW9mIFRdOiBUW0tdIGV4dGVuZHMgKC4uLng6IGFueVtdKSA9PiBUID8gKC4uLng6IGFueVtdKSA9PiBQdWJsaWNBcGk8VD4gOiBUW0tdO1xyXG59O1xyXG4vKipcclxuICogQSBudWxsIGljb24gcmVnaXN0cnkgdGhhdCBtdXN0IGJlIGltcG9ydGVkIHRvIGFsbG93IGRpc2FibGluZyBvZiBjdXN0b21cclxuICogaWNvbnMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBGYWtlTWF0SWNvblJlZ2lzdHJ5IGltcGxlbWVudHMgUHVibGljQXBpPE1hdEljb25SZWdpc3RyeT4sIE9uRGVzdHJveSB7XHJcbiAgICBhZGRTdmdJY29uKCk6IHRoaXM7XHJcbiAgICBhZGRTdmdJY29uTGl0ZXJhbCgpOiB0aGlzO1xyXG4gICAgYWRkU3ZnSWNvbkluTmFtZXNwYWNlKCk6IHRoaXM7XHJcbiAgICBhZGRTdmdJY29uTGl0ZXJhbEluTmFtZXNwYWNlKCk6IHRoaXM7XHJcbiAgICBhZGRTdmdJY29uU2V0KCk6IHRoaXM7XHJcbiAgICBhZGRTdmdJY29uU2V0TGl0ZXJhbCgpOiB0aGlzO1xyXG4gICAgYWRkU3ZnSWNvblNldEluTmFtZXNwYWNlKCk6IHRoaXM7XHJcbiAgICBhZGRTdmdJY29uU2V0TGl0ZXJhbEluTmFtZXNwYWNlKCk6IHRoaXM7XHJcbiAgICByZWdpc3RlckZvbnRDbGFzc0FsaWFzKCk6IHRoaXM7XHJcbiAgICBjbGFzc05hbWVGb3JGb250QWxpYXMoYWxpYXM6IHN0cmluZyk6IHN0cmluZztcclxuICAgIGdldERlZmF1bHRGb250U2V0Q2xhc3MoKTogc3RyaW5nO1xyXG4gICAgZ2V0U3ZnSWNvbkZyb21VcmwoKTogT2JzZXJ2YWJsZTxTVkdFbGVtZW50PjtcclxuICAgIGdldE5hbWVkU3ZnSWNvbigpOiBPYnNlcnZhYmxlPFNWR0VsZW1lbnQ+O1xyXG4gICAgc2V0RGVmYXVsdEZvbnRTZXRDbGFzcygpOiB0aGlzO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIHByaXZhdGUgX2dlbmVyYXRlRW1wdHlTdmc7XHJcbn1cclxuLyoqIEltcG9ydCB0aGlzIG1vZHVsZSBpbiB0ZXN0cyB0byBpbnN0YWxsIHRoZSBudWxsIGljb24gcmVnaXN0cnkuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdEljb25UZXN0aW5nTW9kdWxlIHtcclxufVxyXG5leHBvcnQge307XHJcbiJdfQ==