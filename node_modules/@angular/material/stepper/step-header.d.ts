/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { ChangeDetectorRef, ElementRef, OnDestroy, TemplateRef } from '@angular/core';
import { MatStepLabel } from './step-label';
import { MatStepperIntl } from './stepper-intl';
import { MatStepperIconContext } from './stepper-icon';
import { CdkStepHeader, StepState } from '@angular/cdk/stepper';
import * as ɵngcc0 from '@angular/core';
export declare class MatStepHeader extends CdkStepHeader implements OnDestroy {
    _intl: MatStepperIntl;
    private _focusMonitor;
    private _intlSubscription;
    /** State of the given step. */
    state: StepState;
    /** Label of the given step. */
    label: MatStepLabel | string;
    /** Error message to display when there's an error. */
    errorMessage: string;
    /** Overrides for the header icons, passed in via the stepper. */
    iconOverrides: {
        [key: string]: TemplateRef<MatStepperIconContext>;
    };
    /** Index of the given step. */
    index: number;
    /** Whether the given step is selected. */
    selected: boolean;
    /** Whether the given step label is active. */
    active: boolean;
    /** Whether the given step is optional. */
    optional: boolean;
    /** Whether the ripple should be disabled. */
    disableRipple: boolean;
    constructor(_intl: MatStepperIntl, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);
    ngOnDestroy(): void;
    /** Focuses the step header. */
    focus(): void;
    /** Returns string label of given step if it is a text label. */
    _stringLabel(): string | null;
    /** Returns MatStepLabel if the label of given step is a template label. */
    _templateLabel(): MatStepLabel | null;
    /** Returns the host HTML element. */
    _getHostElement(): HTMLElement;
    /** Template context variables that are exposed to the `matStepperIcon` instances. */
    _getIconContext(): MatStepperIconContext;
    _getDefaultTextForState(state: StepState): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatStepHeader>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MatStepHeader, "mat-step-header", never, {
    "state": "state";
    "label": "label";
    "errorMessage": "errorMessage";
    "iconOverrides": "iconOverrides";
    "index": "index";
    "selected": "selected";
    "active": "active";
    "optional": "optional";
    "disableRipple": "disableRipple";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC1oZWFkZXIuZC50cyIsInNvdXJjZXMiOlsic3RlcC1oZWFkZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFhQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKlxyXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxyXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXHJcbiAqL1xyXG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XHJcbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1hdFN0ZXBMYWJlbCB9IGZyb20gJy4vc3RlcC1sYWJlbCc7XHJcbmltcG9ydCB7IE1hdFN0ZXBwZXJJbnRsIH0gZnJvbSAnLi9zdGVwcGVyLWludGwnO1xyXG5pbXBvcnQgeyBNYXRTdGVwcGVySWNvbkNvbnRleHQgfSBmcm9tICcuL3N0ZXBwZXItaWNvbic7XHJcbmltcG9ydCB7IENka1N0ZXBIZWFkZXIsIFN0ZXBTdGF0ZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9zdGVwcGVyJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0U3RlcEhlYWRlciBleHRlbmRzIENka1N0ZXBIZWFkZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgX2ludGw6IE1hdFN0ZXBwZXJJbnRsO1xyXG4gICAgcHJpdmF0ZSBfZm9jdXNNb25pdG9yO1xyXG4gICAgcHJpdmF0ZSBfaW50bFN1YnNjcmlwdGlvbjtcclxuICAgIC8qKiBTdGF0ZSBvZiB0aGUgZ2l2ZW4gc3RlcC4gKi9cclxuICAgIHN0YXRlOiBTdGVwU3RhdGU7XHJcbiAgICAvKiogTGFiZWwgb2YgdGhlIGdpdmVuIHN0ZXAuICovXHJcbiAgICBsYWJlbDogTWF0U3RlcExhYmVsIHwgc3RyaW5nO1xyXG4gICAgLyoqIEVycm9yIG1lc3NhZ2UgdG8gZGlzcGxheSB3aGVuIHRoZXJlJ3MgYW4gZXJyb3IuICovXHJcbiAgICBlcnJvck1lc3NhZ2U6IHN0cmluZztcclxuICAgIC8qKiBPdmVycmlkZXMgZm9yIHRoZSBoZWFkZXIgaWNvbnMsIHBhc3NlZCBpbiB2aWEgdGhlIHN0ZXBwZXIuICovXHJcbiAgICBpY29uT3ZlcnJpZGVzOiB7XHJcbiAgICAgICAgW2tleTogc3RyaW5nXTogVGVtcGxhdGVSZWY8TWF0U3RlcHBlckljb25Db250ZXh0PjtcclxuICAgIH07XHJcbiAgICAvKiogSW5kZXggb2YgdGhlIGdpdmVuIHN0ZXAuICovXHJcbiAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgLyoqIFdoZXRoZXIgdGhlIGdpdmVuIHN0ZXAgaXMgc2VsZWN0ZWQuICovXHJcbiAgICBzZWxlY3RlZDogYm9vbGVhbjtcclxuICAgIC8qKiBXaGV0aGVyIHRoZSBnaXZlbiBzdGVwIGxhYmVsIGlzIGFjdGl2ZS4gKi9cclxuICAgIGFjdGl2ZTogYm9vbGVhbjtcclxuICAgIC8qKiBXaGV0aGVyIHRoZSBnaXZlbiBzdGVwIGlzIG9wdGlvbmFsLiAqL1xyXG4gICAgb3B0aW9uYWw6IGJvb2xlYW47XHJcbiAgICAvKiogV2hldGhlciB0aGUgcmlwcGxlIHNob3VsZCBiZSBkaXNhYmxlZC4gKi9cclxuICAgIGRpc2FibGVSaXBwbGU6IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3RvcihfaW50bDogTWF0U3RlcHBlckludGwsIF9mb2N1c01vbml0b3I6IEZvY3VzTW9uaXRvciwgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKiBGb2N1c2VzIHRoZSBzdGVwIGhlYWRlci4gKi9cclxuICAgIGZvY3VzKCk6IHZvaWQ7XHJcbiAgICAvKiogUmV0dXJucyBzdHJpbmcgbGFiZWwgb2YgZ2l2ZW4gc3RlcCBpZiBpdCBpcyBhIHRleHQgbGFiZWwuICovXHJcbiAgICBfc3RyaW5nTGFiZWwoKTogc3RyaW5nIHwgbnVsbDtcclxuICAgIC8qKiBSZXR1cm5zIE1hdFN0ZXBMYWJlbCBpZiB0aGUgbGFiZWwgb2YgZ2l2ZW4gc3RlcCBpcyBhIHRlbXBsYXRlIGxhYmVsLiAqL1xyXG4gICAgX3RlbXBsYXRlTGFiZWwoKTogTWF0U3RlcExhYmVsIHwgbnVsbDtcclxuICAgIC8qKiBSZXR1cm5zIHRoZSBob3N0IEhUTUwgZWxlbWVudC4gKi9cclxuICAgIF9nZXRIb3N0RWxlbWVudCgpOiBIVE1MRWxlbWVudDtcclxuICAgIC8qKiBUZW1wbGF0ZSBjb250ZXh0IHZhcmlhYmxlcyB0aGF0IGFyZSBleHBvc2VkIHRvIHRoZSBgbWF0U3RlcHBlckljb25gIGluc3RhbmNlcy4gKi9cclxuICAgIF9nZXRJY29uQ29udGV4dCgpOiBNYXRTdGVwcGVySWNvbkNvbnRleHQ7XHJcbiAgICBfZ2V0RGVmYXVsdFRleHRGb3JTdGF0ZShzdGF0ZTogU3RlcFN0YXRlKTogc3RyaW5nO1xyXG59XHJcbiJdfQ==